// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Genero {
  MASCULINO
  FEMENINO
  OTRO
}

enum Roles {
  HOST
  RENTER
  DRIVER
}

model Usuario {
  id               Int            @id @default(autoincrement())
  nombre           String
  correo           String         @unique
  fecha_nacimiento DateTime?
  genero           Genero?
  id_ciudad        Int?
  ciudad           Ciudad?        @relation(fields: [id_ciudad], references: [id])
  contraseña      String?
  google_id        String?
  foto             String?
  telefono         String?
  roles            UsuarioRol[]
  favoritos        Favorito[]
  calificaciones   Calificacion[]
  notificaciones   Notificacion[]
  reservas         Reserva[]
  carros           Carro[]        @relation("CarrosPorUsuario")
  busquedas        Busqueda[]
}

model UsuarioRol {
  id         Int        @id @default(autoincrement())
  id_rol     Int
  id_usuario Int
  usuario    Usuario    @relation(fields: [id_usuario], references: [id])
  rol        Rol        @relation(fields: [id_rol], references: [id])
  favoritos  Favorito[]
}

model Rol {
  id       Int          @id @default(autoincrement())
  rol      String
  usuarios UsuarioRol[]
}

model Favorito {
  id             Int        @id @default(autoincrement())
  id_usuario_rol Int
  id_carro       Int
  usuarioRol     UsuarioRol @relation(fields: [id_usuario_rol], references: [id])
  carro          Carro      @relation(fields: [id_carro], references: [id])
  id_usuario     Int?
  usuario        Usuario?   @relation(fields: [id_usuario], references: [id])
}

model Notificacion {
  id             Int     @id @default(autoincrement())
  id_usuario_rol Int
  mensaje        String
  usuario        Usuario @relation(fields: [id_usuario_rol], references: [id])
}

model Carro {
  id                              Int                               @id @default(autoincrement())
  vim                             String
  año                            Int
  marca                           String
  modelo                          String
  placa                           String
  id_direccion                    Int
  direccion                       Direccion                         @relation(fields: [id_direccion], references: [id])
  fecha_ingreso                   DateTime?                         @default(now()) //campo añadido
  asientos                        Int
  puertas                         Int
  //capacidad_tanque     Int?
  soat                            Boolean
  precio_por_dia                  Float
  num_mantenimientos              Int
  transmicion                     String
  estado                          String
  id_usuario_rol                  Int
  descripcion                     String?
  ingresoTotal                    Float?                            @default(0)
  NumeroViajes                    Int?                              @default(0)
  usuario                         Usuario?                          @relation("CarrosPorUsuario", fields: [id_usuario_rol], references: [id])
  //id_seguro          Int?
  //seguroCarro        SeguroCarro?                @relation(fields: [id_seguro], references: [id])
  id_tipodeDescuento              Int? //este tiene el proposito de que cuando le estes registrando una reserva le pase este id
  //y de esta forma pueda saber si el carro tiene un descuento o no y en la tabla de descuentos
  //pasará este id y de esta forma se mantendrá un registro de que carro fue reservado con este descuento.
  //ademas no hay un problema con los id debido al manejo de estos evitando en todo momento generar conflicto, analiza y podras notar esto.
  tipodeDescuento                 tipodeDescuento?                  @relation(fields: [id_tipodeDescuento], references: [id])
  disponible_desde                DateTime? //campo añadido para filtros
  disponible_hasta                DateTime? //campo añadido para filtros
  combustiblesporCarro            CombustibleCarro[]
  caracteristicasAdicionalesCarro caracteristicasAdicionalesCarro[]
  contratosAlquiler               contratodeAlquiler[]
  imagenes                        Imagen[]
  favoritos                       Favorito[]
  calificaciones                  Calificacion[]
  reservas                        Reserva[]
  seguroCarro                     SeguroCarro[]
}

model SeguroCarro {
  id          Int      @id @default(autoincrement())
  fechaInicio DateTime
  fechaFin    DateTime
  id_carro    Int
  carro       Carro    @relation(fields: [id_carro], references: [id])
  id_seguro   Int
  seguro      Seguro   @relation(fields: [id_seguro], references: [id])
}

model Seguro {
  id          Int           @id @default(autoincrement())
  nombre      String
  tipoSeguro  String
  empresa     String
  seguroCarro SeguroCarro[]
}

model CombustibleCarro {
  id             Int             @id @default(autoincrement())
  id_carro       Int
  carro          Carro           @relation(fields: [id_carro], references: [id])
  id_combustible Int
  combustible    TipoCombustible @relation(fields: [id_combustible], references: [id])
}

model TipoCombustible {
  id                Int                @id @default(autoincrement())
  tipoDeCombustible String
  id_carro          Int
  combustibleCarro  CombustibleCarro[]
}

model caracteristicasAdicionalesCarro {
  id                            Int                        @id @default(autoincrement())
  id_carro                      Int
  carro                         Carro                      @relation(fields: [id_carro], references: [id])
  id_carasteristicasAdicionales Int
  carasteristicasAdicionales    CarasteristicasAdicionales @relation(fields: [id_carasteristicasAdicionales], references: [id])
}

model CarasteristicasAdicionales {
  id                              Int                               @id @default(autoincrement())
  nombre                          String
  caracteristicasAdicionalesCarro caracteristicasAdicionalesCarro[]
}

model Imagen {
  id        Int     @id @default(autoincrement())
  data      String? // URL de la imagen
  public_id String? // ID único de Cloudinary
  width     Int? // Opcional: ancho de la imagen
  height    Int? // Opcional: alto de la imagen
  format    String? // Opcional: formato de la imagen (jpg, png, etc.)
  id_carro  Int
  Carro     Carro   @relation(fields: [id_carro], references: [id])
}

model Calificacion {
  id             Int      @id @default(autoincrement())
  id_usuario_rol Int
  calf_carro     Int? //no deberia ser obligatorio  //añadido ?
  calf_usuario   Int? //no deberia ser obligatorio  //añadido  ?
  id_carro       Int
  id_usuario     Int
  carro          Carro    @relation(fields: [id_carro], references: [id])
  usuario        Usuario? @relation(fields: [id_usuario], references: [id])
}

model Reserva {
  id                     Int         @id @default(autoincrement())
  id_carro               Int
  id_usuario             Int
  kilometraje            Int?
  fecha_creacion         DateTime    @default(now())
  fecha_inicio           DateTime
  montoPagoInicial       Float?
  montoTotalConDescuento Float?
  hora_inicio            Int?
  hora_fin               Int?
  fecha_fin              DateTime?
  fecha_expiracion       DateTime?
  estado                 String      @default("pendiente")
  carro                  Carro       @relation(fields: [id_carro], references: [id])
  usuario                Usuario?    @relation(fields: [id_usuario], references: [id])
  garantia               Garantia[]
  descuento              Descuento[] //porque un carro puede tener varios descuentos, por ejemplo, un descuento por ser cliente frecuente y otro por una promocion de la empresa.
}

model Descuento {
  id               Int              @id @default(autoincrement())
  montoDescontado  Float? //para hayar este monto primero se consulta ah tipo de descuento y se calcula en base al porsentaje.
  id_descuentoTipo Int?
  tipodeDescuento  tipodeDescuento? @relation(fields: [id_descuentoTipo], references: [id])
  reservas         Reserva[]
}

model tipodeDescuento {
  id           Int         @id @default(autoincrement())
  nombre       String
  porcentaje   Float
  fecha_inicio DateTime?
  fecha_fin    DateTime?
  descuentos   Descuento[]
  carros       Carro[]
}

model Garantia {
  id            Int      @id @default(autoincrement())
  precio        Float
  fecha_limite  DateTime
  descripcion   String?
  pagado        Boolean
  //documentacion Boolean
  pagoPorDaños Boolean?
  id_reserva    Int?
  reserva       Reserva? @relation(fields: [id_reserva], references: [id])
}

model contratodeAlquiler {
  id          Int    @id @default(autoincrement())
  id_reserva  Int
  kilometraje Int
  id_carro    Int
  carro       Carro  @relation(fields: [id_carro], references: [id])
  estado      String @default("pendiente")
}

model Ciudad {
  id          Int          @id @default(autoincrement())
  nombre      String
  pais        Pais?        @relation(fields: [id_pais], references: [id])
  id_pais     Int?
  usuarios    Usuario[]
  provincia   Provincia[]
  aueropuerto aeropuerto[]
}

model aeropuerto {
  id        Int    @id @default(autoincrement())
  nombre    String
  latitud   Float?
  longitud  Float?
  ciudad    Ciudad @relation(fields: [id_ciudad], references: [id])
  id_ciudad Int
}

model Pais {
  id     Int      @id @default(autoincrement())
  nombre String
  ciudad Ciudad[]
}

model Direccion {
  id           Int         @id @default(autoincrement())
  id_provincia Int
  calle        String
  zona         String?
  num_casa     String?
  latitud      Float?
  longitud     Float?
  provincia    Provincia   @relation(fields: [id_provincia], references: [id])
  carros       Carro[]
  ubicacion    Ubicacion[]
}

model Ubicacion {
  id              Int       @id @default(autoincrement())
  direccion       Direccion @relation(fields: [id_direccion], references: [id])
  id_direccion    Int
  coordenadas     Json
  radio_cobertura Int       @default(5000)
}

model Provincia {
  id          Int         @id @default(autoincrement())
  nombre      String
  ciudad      Ciudad      @relation(fields: [id_ciudad], references: [id])
  id_ciudad   Int
  direcciones Direccion[]
}

model Busqueda {
  id             Int      @id @default(autoincrement())
  criterio       String
  fecha_creacion DateTime @default(now())
  id_usuario     Int
  usuario        Usuario  @relation(fields: [id_usuario], references: [id])
}
